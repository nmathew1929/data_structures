LISTS
    Used to store values values sequentially.
    Can dynamically grow or shrink, as opposed ot an array.

IntList
    A primitive linked-list implementation
    that keeps track of an int value and the next node.
           has get() and size()

    Motivation for IntList:
        to build a DS that dynamically grows and shrinks, unlike an array.

    pros 
        can add more integers dynamically.
    cons
        clunky to use
        the client has to directly deal with pointers.
        having a naked recursive data structure is strange. (atleast in java)
        inorder to effectively write code they need to know how references work, in a pretty deep way. The recursion is right there for everyone to see.
        
    Uses:
        No uses, only for demonstration purposes.

SLList
    A primitive singly linked-list implementation
    Motivation for SLList :
        to automatically take care of pointers, so that the user does not need to.
    pros:
        has addFirst(), addLast(), size()
        don't have to mess around this pointers. the private nested IntNode class takes care of this.
        always has a sentinel node which takes care of the 0 item list scenario.
        addFirst() is fast
        size is not iterative and is very fast because of caching

    cons:
        adding an item in the middle, requires to iterate to that spot.
        addLast() is very expensive, as it requires you to iterate to that spot.

    Uses:
        can be used to store int values, but is not recommended
            as it is missing lot of functionality that we expect from a DS
            and the methods it provide are not optimized.

 DLList
    Doubly Linked List.
    Motivation for DLList:
        to fix addLast() so that it can be as fast as addFirst()
    pros:
        Addition and removal from both ends are constant time O(1).
        Lookups from both ends are constant time O(1).
        No wasted node, the DS dynamically grows and shrinks, no wasted space.
    cons:
        Getting an item form the middle is still expensive, requires iteration.
        Only getFirst and getLast is O(1), arbitrary lookup is O(n)
        if you want to constant lookup there are other DS that offer constant look up times.
    Uses:
        Can be used for construction of
            Stacks
            Queues
            Dequeues

AList
    Array List
    Motivation for AList
        to speed up arbitrary lookup performance, as it stands now it is O(n)
    pros:
        Lookups are O(1),
            Lookups are constant for first index, last index and any other index in between.
        removeFirst and removeLast is O(1), most of the time.
    cons:
        Implementation can be a little confusing?
        You have to make sure resize method isn't called a lot.
            removeFirst and removeLast can be expensive if resize called a lot.
        Since the underlying array is contiguous, wasted space can be an issue.
            You also have to have a loading constant, to make sure that underlying array isn't used.
    Uses:
        Can be used for  construction of
            Lists
            Dequeues
            Queues
            Stacks
